Tips & tricks of structuring Go applications
15:04 21 Jan 2019

Valentyn Kremeshnyi
Software Engineer, SoftServe

* Problems
- How should I structure my Go application?
- What authors of Golang tell about structuring your application?

* Use Frameworks
- Revel
- Beego
- Martini
- Go-kit
- Gin Gonic
- Buffalo
- etc...


* Use Frameworks

Pros

- predefined structure
- logging, metrix, tracing, middlewares etc... from the box
- concentrate on business logic
- switch between project based on the same framework

Cons

- general solution for specific problems
- takes time to learn and become master
- hard to modify core behavior

* Create own structure

It won't be a big deal for me to create my own structure

* Create own structure

Questions, decisions

- What if I put everything in the main package?
- What if I use structure from programming language that I already know?
- How do I decide if something should be in its own package?
- What is the Go way of structuring your application?
- What should I share between packages?
- Probably I should come back to some framework and it is still a good idea?

* Let's create a new task where we can apply all our knowledge

It should be something related to the real world

* A product search service for e-commerce platform

- Lets image we have e-commerce platform with selling fashion products
- Each product has title, brand, price and stock
- The platform should have search functionality
- We can apply different filters e.g. https://example.com/products?q=black shoes&filter=brand:brand_name
- Store our data in elasticsearch

* Flat structure

The first thing that comes to my mind is Flat structure

* Step 1

*Flat* *structure*

/
|--- elastic.go
|--- handlers.go
|--- main.go
|--- middleware.go
|--- model.go
|--- query_param.go
|--- storage.go

* Flat structure

Pros

- easy to read and maintain
- good structure if you don't know where to start
- not complicated
- no circle dependencies

Cons

- you can modify everything (use only one package)
- can't say what the application does
- hard to support large application

* Group by function ("Layered architecture")

I can apply knowledge from some other programming language that I already know

* Step 2

*Group* *by* *function* *("Layered* *architecture")*
/
|--- *handlers*
|------ middleware.go
|------ product.go
|--- *models*
|------ product.go
|------ query_param.go
|------ storage.go
|--- *storage*
|------ elastic.go
|--- main.go

* Group by function ("Layered architecture")

Pros

- easy to decide where everything goes
- relevant things to the same package
- similar to the structure that you already know

Cons

- where to put common const?
- don't give you exact answer what this application does

* Group by module

What if I divide everything by little modules?

* Step 3

*Group* *by* *module*
/
|--- *product*
|------ product.go
|------ query_param.go
|------ handler.go
|------ middleware.go
|--- *storage*
|------ elastic.go
|------ storage.go
|--- main.go

* Group by module

Pros

- everything grouped logically
- easy to find necessary information

Cons

- naming
- circular dependency

* Group by context (Domain Driver Development, Adapter)

What if I would apply DDD?

* Step4

*Group* *by* *context* *(Domain* *Driver* *Development,* *Adapter)*

*Entity* (Product) - abstract instance
*Value* *Object* - can be part of entity, similar to property
*Domain* *Event* (Product not found, Product exists) - errors, acknowledgment, etc...
*Aggregate* (ProductOrder) - combine different entities
*Service* (ProductSearcher) - responsibility of entity, business logic
*Repository* (ElasticService) - real implementation of service

* Group by context
/
|--- *cmd*
|------ *search_server*
|--------- main.go
|--- *pkg*
|------ *http*
|--------- handler.go
|--------- middleware.go
|------ *elastic*
|--------- search_service.go
|--- product.go
|--- product_service.go
|--- query_param.go

* Group by context

Pros

- clear structure
- easy to read and understand
- no circular dependency

Cons

- need time to get used
- no reason to use for a few domains

* Best practices for organizing Go packages

- use two root directories: *cmd* (for binaries), *pkg* (for all packages)
- use *mock* package as shared subpackage
- *main* packages connect together dependencies
- package should contains code that has a single purpose
- package organization - libraries (parent - interface, children - subpackages, good example package encoding)
- package name - small word, that describes purpose

* Conclusion

- begin with *Flat* *structure* if you have no idea from what to start
- use *Group* *by* *function* is you build a more complex solution
- use *Group* *by* *module* if you can divide on independent modules
- use *Domain* *driven* *development* if you want to split your business logic and work with storage

* Links

- [[https://github.com/valentyn88/presentation]]
- [[https://github.com/valentyn88/presentation_slides]]
- [[https://www.youtube.com/watch?v=MzTcsI6tn-0&feature=youtu.be][Brian Ketelsen. Go best practices.]]
- [[https://medium.com/@benbjohnson/standard-package-layout-7cdbc8391fc1][Standard Package Layout]]
- [[https://www.youtube.com/watch?v=oL6JBUk6tj0][Kat Zien - How Do You Structure Your Go Apps]]
- [[https://www.youtube.com/watch?v=twcDf_Y2gXY][Marcus Olsson - Building an enterprise service in Go]]
- [[https://www.youtube.com/watch?v=6SBjKOwVq0o][Chris Fidao - Hexagonal Architecture]]


